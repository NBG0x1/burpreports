<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<testsuite name="BurpSuite Test" timestamp="2012-12-14T17:18:34.260+01:00" hostname="diverse, see name at the testcases" tests="10" failures="6" errors="0" time="32274" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="junit.xsd">
    <properties>
        <property name="RESULT_URLS_FILE_NAME" value="brigitte_2012_12_14.urls"/>
        <property name="RESULT_ISSUES_FILE_NAME" value="brigitte_2012_12_14.html"/>
        <property name="RESULT_XUNIT_FILE_NAME" value="brigitte_2012_12_14.xml"/>
        <property name="RESULT_ZIP_FILE_NAME" value="brigitte_2012_12_14.zip"/>
        <property name="URLS_TO_SCAN_FILE_NAME" value="urls_to_scan.txt"/>
    </properties>
    <testcase name="http://localhost:80/rf/faq.php" classname="" time="4062">
        <failure message="Cross-site scripting (reflected)" type="High">&lt;h2&gt;Issue Detail&lt;/h2&gt;The name of an arbitrarily supplied request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload &lt;b&gt;6e4e2"style%3d"behavior&lt;wbr&gt;%3aurl(%23default%23time2&lt;wbr&gt;)"onbegin%3d"alert(1)&lt;wbr&gt;"cdb7edb51c8&lt;/b&gt; was submitted in the name of an arbitrarily supplied request parameter. This input was echoed as &lt;b&gt;6e4e2"style="behavior:url&lt;wbr&gt;(#default#time2)"onbegin=&lt;wbr&gt;"alert(1)"cdb7edb51c8&lt;/b&gt; in the application's response.&lt;br&gt;&lt;br&gt;This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses a dynamically evaluated expression with a style attribute to introduce arbitrary JavaScript into the document. Note that this technique is specific to Internet Explorer, and may not work on other browsers.&lt;h2&gt;Issue Background&lt;/h2&gt;Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request which, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.&lt;br&gt;&lt;br&gt;The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.&lt;br&gt;&lt;br&gt;Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site which causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).&lt;br&gt;&lt;br&gt;The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality which it contains, and the other applications which belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain which can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization which owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application, and exploiting users' trust in the organization in order to capture credentials for other applications which it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk.</failure>
    </testcase>
    <testcase name="http://localhost:80/rf/faq.php" classname="" time="7477">
        <failure message="Cross-site scripting (reflected)" type="High">&lt;h2&gt;Issue Detail&lt;/h2&gt;The name of an arbitrarily supplied request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload &lt;b&gt;59078"&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;&lt;wbr&gt;/script&amp;gt;bc22ba4526&lt;/b&gt; was submitted in the name of an arbitrarily supplied request parameter. This input was echoed unmodified in the application's response.&lt;br&gt;&lt;br&gt;This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.&lt;h2&gt;Issue Background&lt;/h2&gt;Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request which, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.&lt;br&gt;&lt;br&gt;The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.&lt;br&gt;&lt;br&gt;Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site which causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).&lt;br&gt;&lt;br&gt;The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality which it contains, and the other applications which belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain which can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization which owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application, and exploiting users' trust in the organization in order to capture credentials for other applications which it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk.</failure>
    </testcase>
    <testcase name="http://localhost:80/rf/faq.php" classname="" time="9421">
        <failure message="Cross-site scripting (reflected)" type="High">&lt;h2&gt;Issue Detail&lt;/h2&gt;The value of the &lt;b&gt;lang&lt;/b&gt; request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload &lt;b&gt;f1dbb"&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;&lt;wbr&gt;/script&amp;gt;80a42af589b&lt;/b&gt; was submitted in the lang parameter. This input was echoed unmodified in the application's response.&lt;br&gt;&lt;br&gt;This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.&lt;h2&gt;Issue Background&lt;/h2&gt;Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request which, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.&lt;br&gt;&lt;br&gt;The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.&lt;br&gt;&lt;br&gt;Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site which causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).&lt;br&gt;&lt;br&gt;The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality which it contains, and the other applications which belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain which can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization which owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application, and exploiting users' trust in the organization in order to capture credentials for other applications which it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk.</failure>
    </testcase>
    <testcase name="http://localhost:80/rf/faq.php" classname="" time="9524">
        <failure message="Cross-site scripting (reflected)" type="High">&lt;h2&gt;Issue Detail&lt;/h2&gt;The value of the &lt;b&gt;lang&lt;/b&gt; request parameter is copied into the HTML document as plain text between tags. The payload &lt;b&gt;a268b&amp;lt;script&amp;gt;alert(1)&amp;lt;&lt;wbr&gt;/script&amp;gt;e2ef5b1fe0b&lt;/b&gt; was submitted in the lang parameter. This input was echoed unmodified in the application's response.&lt;br&gt;&lt;br&gt;This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.&lt;h2&gt;Issue Background&lt;/h2&gt;Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request which, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.&lt;br&gt;&lt;br&gt;The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.&lt;br&gt;&lt;br&gt;Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site which causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).&lt;br&gt;&lt;br&gt;The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality which it contains, and the other applications which belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain which can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization which owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application, and exploiting users' trust in the organization in order to capture credentials for other applications which it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk.</failure>
    </testcase>
    <testcase name="http://localhost:80/rf/faq.php" classname="" time="9616">
        <failure message="Cross-site scripting (reflected)" type="High">&lt;h2&gt;Issue Detail&lt;/h2&gt;The value of the &lt;b&gt;lang&lt;/b&gt; request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload &lt;b&gt;2bb65"&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;&lt;wbr&gt;/script&amp;gt;05e10251efa4d9e6e&lt;/b&gt; was submitted in the lang parameter. This input was echoed unmodified in the application's response.&lt;br&gt;&lt;br&gt;This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.&lt;br&gt;&lt;br&gt;The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.&lt;h2&gt;Issue Background&lt;/h2&gt;Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request which, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.&lt;br&gt;&lt;br&gt;The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.&lt;br&gt;&lt;br&gt;Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site which causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).&lt;br&gt;&lt;br&gt;The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality which it contains, and the other applications which belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain which can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization which owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application, and exploiting users' trust in the organization in order to capture credentials for other applications which it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk.</failure>
    </testcase>
    <testcase name="http://localhost:80/rf/faq.php" classname="" time="9713">
        <failure message="Cross-site scripting (reflected)" type="High">&lt;h2&gt;Issue Detail&lt;/h2&gt;The value of the &lt;b&gt;lang&lt;/b&gt; request parameter is copied into the HTML document as plain text between tags. The payload &lt;b&gt;f7400&amp;lt;script&amp;gt;alert(1)&amp;lt;&lt;wbr&gt;/script&amp;gt;fd421ab87262825d2&lt;/b&gt; was submitted in the lang parameter. This input was echoed unmodified in the application's response.&lt;br&gt;&lt;br&gt;This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.&lt;br&gt;&lt;br&gt;The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.&lt;h2&gt;Issue Background&lt;/h2&gt;Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request which, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.&lt;br&gt;&lt;br&gt;The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.&lt;br&gt;&lt;br&gt;Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site which causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).&lt;br&gt;&lt;br&gt;The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality which it contains, and the other applications which belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain which can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization which owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application, and exploiting users' trust in the organization in order to capture credentials for other applications which it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk.</failure>
    </testcase>
    <system-out></system-out>
</testsuite>
